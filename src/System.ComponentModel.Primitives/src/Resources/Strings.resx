<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PropertyCategoryAction" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="PropertyCategoryAppearance" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="PropertyCategoryAsynchronous" xml:space="preserve">
    <value>Asynchronous</value>
  </data>
  <data name="PropertyCategoryBehavior" xml:space="preserve">
    <value>Behavior</value>
  </data>
  <data name="PropertyCategoryConfig" xml:space="preserve">
    <value>Configurations</value>
  </data>
  <data name="PropertyCategoryData" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="PropertyCategoryDDE" xml:space="preserve">
    <value>DDE</value>
  </data>
  <data name="PropertyCategoryDefault" xml:space="preserve">
    <value>Misc</value>
  </data>
  <data name="PropertyCategoryDesign" xml:space="preserve">
    <value>Design</value>
  </data>
  <data name="PropertyCategoryDragDrop" xml:space="preserve">
    <value>Drag Drop</value>
  </data>
  <data name="PropertyCategoryFocus" xml:space="preserve">
    <value>Focus</value>
  </data>
  <data name="PropertyCategoryFont" xml:space="preserve">
    <value>Font</value>
  </data>
  <data name="PropertyCategoryFormat" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="PropertyCategoryKey" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="PropertyCategoryLayout" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="PropertyCategoryList" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="PropertyCategoryMouse" xml:space="preserve">
    <value>Mouse</value>
  </data>
  <data name="PropertyCategoryPosition" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="PropertyCategoryScale" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="PropertyCategoryText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="PropertyCategoryWindowStyle" xml:space="preserve">
    <value>Window Style</value>
  </data>
  <!-- To be moved -->

  <data name="Async_AsyncEventArgs_Cancelled" xml:space="preserve">
    <value>True if operation was cancelled.</value>
  </data>
  <data name="Async_AsyncEventArgs_Error" xml:space="preserve">
    <value>Exception that occurred during operation.  Null if no error.</value>
  </data>
  <data name="Async_AsyncEventArgs_UserState" xml:space="preserve">
    <value>User-supplied state to identify operation.</value>
  </data>
  <data name="Async_ExceptionOccurred" xml:space="preserve">
    <value>An exception occurred during the operation, making the result invalid.  Check InnerException for exception details.</value>
  </data> 
  <data name="Async_OperationCancelled" xml:space="preserve">
    <value>Operation has been cancelled.</value>
  </data> 
  <data name="Async_OperationAlreadyCompleted" xml:space="preserve">
    <value>This operation has already had OperationCompleted called on it and further calls are illegal.</value>
  </data> 
  <data name="Async_ProgressChangedEventArgs_ProgressPercentage" xml:space="preserve">
    <value>Percentage progress made in operation.</value>
  </data> 
  <data name="Async_ProgressChangedEventArgs_UserState" xml:space="preserve">
    <value>User-supplied state to identify operation.</value>
  </data> 
  <data name="Async_NullDelegate" xml:space="preserve">
    <value>A non-null SendOrPostCallback must be supplied.</value>
  </data>
  <data name="ISupportInitializeDescr" xml:space="preserve">
    <value>Specifies support for transacted initialization.</value>
  </data>
  <data name="BackgroundWorker_Desc" xml:space="preserve">
    <value>Executes an operation on a separate thread.</value>
  </data>
  <data name="BackgroundWorker_CancellationPending" xml:space="preserve">
    <value>Has the user attempted to cancel the operation? To be accessed from DoWork event handler.</value>
  </data>
  <data name="BackgroundWorker_IsBusy" xml:space="preserve">
    <value>Is the worker still currently working on a background operation?</value>
  </data>
  <data name="BackgroundWorker_ProgressChanged" xml:space="preserve">
    <value>Raised when the worker thread indicates that some progress has been made.</value>
  </data>
  <data name="BackgroundWorker_WorkerDoesntReportProgress" xml:space="preserve">
    <value>This BackgroundWorker states that it doesn't report progress. Modify WorkerReportsProgress to state that it does report progress.</value>
  </data>
  <data name="BackgroundWorker_RunWorkerCompleted" xml:space="preserve">
    <value>Raised when the worker has completed (either through success, failure, or cancellation).</value>
  </data>
  <data name="BackgroundWorker_WorkerReportsProgress" xml:space="preserve">
    <value>Whether the worker will report progress.</value>
  </data>
  <data name="BackgroundWorker_WorkerSupportsCancellation" xml:space="preserve">
    <value>Whether the worker supports cancellation.</value>
  </data>
  <data name="PropertyCategoryAsynchronous" xml:space="preserve">
    <value>Asynchronous</value>
  </data>
  <data name="BackgroundWorker_Desc" xml:space="preserve">
    <value>Executes an operation on a separate thread.</value>
  </data>
  <data name="BackgroundWorker_DoWorkEventArgs_Argument" xml:space="preserve">
    <value>Argument passed into the worker handler from BackgroundWorker.RunWorkerAsync.</value>
  </data>
  <data name="BackgroundWorker_DoWorkEventArgs_Result" xml:space="preserve">
    <value>Result from the worker function.</value>
  </data>
  <data name="ToolboxItemAttributeFailedGetType" xml:space="preserve">
    <value>Failed to create ToolboxItem of type: {0}</value>
  </data>
  <data name="BackgroundWorker_WorkerDoesntSupportCancellation" xml:space="preserve">
    <value>This BackgroundWorker states that it doesn't support cancellation. Modify WorkerSupportsCancellation to state that it does support cancellation.</value>
  </data>
  <data name="BackgroundWorker_WorkerAlreadyRunning" xml:space="preserve">
    <value>This BackgroundWorker is currently busy and cannot run multiple tasks concurrently.</value>
  </data>
  <data name="BackgroundWorker_WorkerDoesntReportProgress" xml:space="preserve">
    <value>This BackgroundWorker states that it doesn't report progress. Modify WorkerReportsProgress to state that it does report progress.</value>
  </data>
  <data name="PropertyTabAttributeBadPropertyTabScope" xml:space="preserve">
    <value>Scope must be PropertyTabScope.Document or PropertyTabScope.Component</value>
  </data>
  <data name="PropertyTabAttributeTypeLoadException" xml:space="preserve">
    <value>Couldn't find type {0}</value>
  </data>
  <data name="PropertyTabAttributeArrayLengthMismatch" xml:space="preserve">
    <value>tabClasses must have the same number of items as tabScopes</value>
  </data>
  <data name="PropertyTabAttributeParamsBothNull" xml:space="preserve">
    <value>An array of tab type names or tab types must be specified</value>
  </data>
  <data name="CultureInfoConverterDefaultCultureString" xml:space="preserve">
    <value>(Default)</value>
  </data>
  <data name="CultureInfoConverterInvalidCulture" xml:space="preserve">
    <value>The {0} culture cannot be converted to a CultureInfo object on this computer.</value>
  </data> 
  <data name="ErrorInvalidServiceInstance" xml:space="preserve">
    <value>The service instance must derive from or implement {0}.</value>
  </data>
  <data name="ErrorServiceExists" xml:space="preserve">
    <value>The service {0} already exists in the service container.</value>
  </data>

  <data name="ErrorMissingPropertyAccessors" xml:space="preserve">
    <value>Accessor methods for the {0} property are missing.</value>
  </data>
  <data name="ErrorInvalidPropertyType" xml:space="preserve">
    <value>Invalid type for the {0} property.</value>
  </data>
  <data name="ErrorMissingEventAccessors" xml:space="preserve">
    <value>Accessor methods for the {0} event are missing.</value>
  </data>
  <data name="ErrorInvalidEventHandler" xml:space="preserve">
    <value>Invalid event handler for the {0} event.</value>
  </data>
  <data name="ErrorInvalidEventType" xml:space="preserve">
    <value>Invalid type for the {0} event.</value>
  </data>
  <data name="InvalidMemberName" xml:space="preserve">
    <value>Invalid member name.</value>
  </data>
  <data name="ErrorBadExtenderType" xml:space="preserve">
    <value>The {0} extender provider is not compatible with the {1} type.</value>
  </data>
  <data name="InvalidArgument" xml:space="preserve">
    <value>'{1}' is not a valid value for '{0}'.</value>
  </data>
  <data name="InvalidNullArgument" xml:space="preserve">
    <value>Null is not a valid value for {0}.</value>
  </data>
  <data name="DuplicateComponentName" xml:space="preserve">
    <value>Duplicate component name '{0}'.  Component names must be unique and case-insensitive.</value>
  </data>
  <data name="ErrorInvalidServiceInstance" xml:space="preserve">
    <value>The service instance must derive from or implement {0}.</value>
  </data>
  <data name="ErrorServiceExists" xml:space="preserve">
    <value>The service {0} already exists in the service container.</value>
  </data>
  <data name="MaskedTextProviderPasswordAndPromptCharError" xml:space="preserve">
    <value>The PasswordChar and PromptChar values cannot be the same.</value>
  </data>
  <data name="MaskedTextProviderInvalidCharError" xml:space="preserve">
    <value>The specified character value is not allowed for this property.</value>
  </data>
  <data name="MaskedTextProviderMaskNullOrEmpty" xml:space="preserve">
    <value>The Mask value cannot be null or empty.</value>
  </data>
  <data name="MaskedTextProviderMaskInvalidChar" xml:space="preserve">
    <value>The specified mask contains invalid characters.</value>
  </data>
  <data name="InstanceDescriptorCannotBeStatic" xml:space="preserve">
    <value>Parameter cannot be static.</value>
  </data>
  <data name="InstanceDescriptorMustBeStatic" xml:space="preserve">
    <value>Parameter must be static.</value>
  </data>
  <data name="InstanceDescriptorMustBeReadable" xml:space="preserve">
    <value>Parameter must be readable.</value>
  </data>
  <data name="InstanceDescriptorLengthMismatch" xml:space="preserve">
    <value>Length mismatch.</value>
  </data>
  <data name="MetaExtenderName" xml:space="preserve">
    <value>{0} on {1}</value>
  </data>
  <data name="CantModifyListSortDescriptionCollection" xml:space="preserve">
    <value>Once a ListSortDescriptionCollection has been created it can't be modified.</value>
  </data>
  <data name="LicExceptionTypeOnly" xml:space="preserve">
    <value>A valid license cannot be granted for the type {0}. Contact the manufacturer of the component for more information.</value>
  </data>
  <data name="LicExceptionTypeAndInstance" xml:space="preserve">
    <value>An instance of type '{1}' was being created, and a valid license could not be granted for the type '{0}'. Please,  contact the manufacturer of the component for more information.</value>
  </data>
  <data name="LicMgrContextCannotBeChanged" xml:space="preserve">
    <value>The CurrentContext property of the LicenseManager is currently locked and cannot be changed.</value>
  </data>
  <data name="LicMgrAlreadyLocked" xml:space="preserve">
    <value>The CurrentContext property of the LicenseManager is already locked by another user.</value>
  </data>
  <data name="LicMgrDifferentUser" xml:space="preserve">
    <value>The CurrentContext property of the LicenseManager can only be unlocked with the same contextUser.</value>
  </data>
  <data name="CollectionConverterText" xml:space="preserve">
    <value>(Collection)</value>
  </data>
  <data name="InstanceCreationEditorDefaultText" xml:space="preserve">
    <value>(New...)</value>
  </data>
  <data name="InvalidEnumArgument" xml:space="preserve">
    <value>The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.</value>
  </data> 
  <data name="ErrorPropertyAccessorException" xml:space="preserve">
    <value>Property accessor '{0}' on object '{1}' threw the following exception:'{2}'</value>
  </data>
  <data name="CHECKOUTCanceled" xml:space="preserve">
    <value>The checkout was canceled by the user.</value>
  </data> 
  <data name="ErrorBadExtenderType" xml:space="preserve">
    <value>The {0} extender provider is not compatible with the {1} type.</value>
  </data>
   <data name="toStringNone" xml:space="preserve">
    <value>(none)</value>
  </data>
</root>